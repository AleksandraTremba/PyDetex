\begin{tikzpicture}
\draw[gray, thick] (-1,2) -- (2,-4);
\draw[gray, thick] (-1,-1) -- (2,2);
\filldraw[black] (0,0) circle (2pt) node[anchor=west]{Intersection point};
\end{tikzpicture}

\begin{references}
\bibitem a+b
\end{references}

\begin{verbatim*}
Text enclosed inside \texttt{verbatim} environment
is printed directly
and all \LaTeX{} commands are ignored.
\end{verbatim*}

\begin{lstlisting}
import numpy as np

def incmatrix(genl1,genl2):
    m = len(genl1)
    n = len(genl2)
    M = None #to become the incidence matrix
    VT = np.zeros((n*m,1), int)  #dummy variable

    #compute the bitwise xor matrix
    M1 = bitxormatrix(genl1)
    M2 = np.triu(bitxormatrix(genl2),1)

    for i in range(m-1):
        for j in range(i+1, m):
            [r,c] = np.where(M2 == M1[i,j])
            for k in range(len(r)):
                VT[(i)*n + r[k]] = 1;
                VT[(i)*n + c[k]] = 1;
                VT[(j)*n + r[k]] = 1;
                VT[(j)*n + c[k]] = 1;

                if M is None:
                    M = np.copy(VT)
                else:
                    M = np.concatenate((M, VT), 1)

                VT = np.zeros((n*m,1), int)

    return M
\end{lstlisting}

\begin{minted}{python}
import numpy as np

def incmatrix(genl1,genl2):
    m = len(genl1)
    n = len(genl2)
    M = None #to become the incidence matrix
    VT = np.zeros((n*m,1), int)  #dummy variable

    #compute the bitwise xor matrix
    M1 = bitxormatrix(genl1)
    M2 = np.triu(bitxormatrix(genl2),1)

    for i in range(m-1):
        for j in range(i+1, m):
            [r,c] = np.where(M2 == M1[i,j])
            for k in range(len(r)):
                VT[(i)*n + r[k]] = 1;
                VT[(i)*n + c[k]] = 1;
                VT[(j)*n + r[k]] = 1;
                VT[(j)*n + c[k]] = 1;

                if M is None:
                    M = np.copy(VT)
                else:
                    M = np.concatenate((M, VT), 1)

                VT = np.zeros((n*m,1), int)

    return M
\end{minted}

\begin{sourcecode}[\label{algorithm}]{pseudocodecolor}{Wall assign algorithm.}
function aggregation($R$, $N$, $\varepsilon$):
	$G \leftarrow \emptyset$ # New collection of wall groups
	for $r$ in $R$ do:
		for $g$ in $G$:
			if distance($g$, $r$) $\ge \varepsilon$:
				$g$ $\oplus \ \{r\}$
				break
			end if
		end for
	end for
	for $i$=1 to $N$: # Merge groups
		$\bar{G} \leftarrow \emptyset$
		for $g$ in $G$ do:
			$merged \leftarrow $ false
			for $w$ in $\bar{G}$:
				if distance($w$, $g$) $\ge \varepsilon$:
					$w$ $\oplus \ \{g\}$
					$merged \leftarrow $ true
				end if
			end for
			if not $merged$ and $\lVert g \rVert \neq \emptyset$:
				$\bar{G}$ $\oplus \ \{g\}$
			end if
		end for
		$G \leftarrow \bar{G}$ # Update group
	end for
	return $G$
\end{sourcecode}